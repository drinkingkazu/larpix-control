import h5py
import pytest

from larpix.format.hdf5format import to_file
from larpix.format.hdf5format_direct import to_file_direct
from larpix.format.pacman_msg_format import parse
from larpix.format.rawhdf5format import to_rawfile, from_rawfile


# The first 20 msgs from tpc12-binary-2023_03_15_03_45_CET.h5
MSGS = [bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  17, 226, 105,  90, 0,   0,   0,  80,   4, 188,  94,  90, 128,  35, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  14, 186,  20,  92, 0,   0,   0, 244, 112,  96,  17,  92, 128,  47,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,   1, 179, 118,  90, 0,   0,   0, 144, 208, 204,  89,  90, 128,  40,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,   9, 155,  88,  92, 0,   0,   0,  48,   4,  91,  86,  92, 128,  38,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,   1, 195, 119,  90, 0,   0,   0, 144, 240, 206,  89,  90, 128,  37, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  25, 224, 102,  92, 0,   0,   0, 136,  60,  34,  76,  92, 128,  67, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  14, 183, 145,  90, 0,   0,   0,  44,  73,  90, 132,  90, 128,  37,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  24, 111, 216,  92, 0,   0,   0, 208,  52, 163, 208,  92, 128,  38, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   2,   0,  68,  23,  81, 146,  90, 0,   0,   0,  88,  81, 159, 129,  90, 128,  30, 192,  68,  12, 14, 147,  90,   0,   0,   0,  36, 241,  91, 140,  90, 128,  30, 64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,   3, 183, 242,  92, 0,   0,   0, 104, 245, 124, 230,  92, 128,  57,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  24,  68, 149,  90, 0,   0,   0, 148,  69,  28, 148,  90, 128,  39, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,   3, 199, 243,  92, 0,   0,   0, 104,  69, 129, 230,  92, 128,  56, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  17,  22, 156,  90, 0,   0,   0,  48, 240, 212, 153,  90, 128,  39, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   3,   0,  68,   3, 215, 244,  92, 0,   0,   0, 104,  45, 130, 230,  92, 128,  53, 192,  68,   6, 218, 244,  92,   0,   0,   0, 196, 144, 104, 230,  92, 128,  49, 192,  68,   5, 234, 244,  92,   0,   0,   0, 200,  44, 121, 230, 92, 128,  49,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  17,  38, 157,  90, 0,   0,   0,  48, 248,  78, 154,  90, 128,  35, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   6,   0,  68,   3, 231, 245,  92, 0,   0,   0, 104, 237, 130, 230,  92, 128,  54, 192,  68,   6, 234, 245,  92,   0,   0,   0, 196, 120, 111, 230,  92, 128,  56, 64,  68,   5, 250, 245,  92,   0,   0,   0, 200,  64, 125, 230, 92, 128,  44, 192,  68,   3, 247, 246,  92,   0,   0,   0, 104, 1, 136, 230,  92, 128,  44, 192,  68,   6, 250, 246,  92,   0, 0,   0, 196, 176, 116, 230,  92, 128,  51,  64,  68,   5,  10, 247,  92,   0,   0,   0, 200, 196, 127, 230,  92, 128,  43, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  17,  54, 158,  90, 0,   0,   0,  52,   8, 126, 153,  90, 128,  35,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   4,   0,  68,   3,   7, 248,  92, 0,   0,   0, 104,  49, 137, 230,  92, 128,  40, 192,  68,   6, 10, 248,  92,   0,   0,   0, 196, 180, 116, 230,  92, 128,  55, 64,  68,   5,  26, 248,  92,   0,   0,   0, 200, 236, 125, 230, 92, 128,  50, 192,  68,  14, 234, 248,  92,   0,   0,   0, 164, 196, 199, 247,  92, 128,  52,  64]),
        bytes([ 68,  67,  49,  17, 100,   0,   1,   0,  68,  32,  78, 176,  90, 0,   0,   0, 184, 165,  42, 165,  90, 128,  31, 192]),
        bytes([ 68,  67,  49,  17, 100,   0,   6,   0,  68,   3,  23, 249,  92, 0,   0,   0, 104,  65, 139, 230,  92, 128,  38,  64,  68,   6, 26, 249,  92,   0,   0,   0, 196, 128, 121, 230,  92, 128,  38, 64,  68,   5,  42, 249,  92,   0,   0,   0, 200, 240, 129, 230, 92, 128,  42,  64,  68,   3,  39, 250,  92,   0,   0,   0, 100, 117, 130, 230,  92, 128,  49, 192,  68,   6,  42, 250,  92,   0, 0,   0, 236,   8, 111, 230,  92, 128,  41, 192,  68,   5,  58, 250,  92,   0,   0,   0, 200, 244, 129, 230,  92, 128,  47, 192])]


# And the corresponding IO groups
IO_GROUPS = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]


@pytest.fixture
def in_file_raw(tmpdir):
    path = str(tmpdir.join('in_raw.h5'))
    to_rawfile(path, msgs=MSGS, msg_headers={'io_groups': IO_GROUPS},
               version='0.0')
    return path


@pytest.fixture
def out_file_indirect(tmpdir):
    return str(tmpdir.join('out_indirect.h5'))


@pytest.fixture
def out_file_direct(tmpdir):
    return str(tmpdir.join('out_direct.h5'))


def test_direct_raw2packet(in_file_raw, out_file_indirect, out_file_direct):
    infile = from_rawfile(in_file_raw)
    msgs = infile['msgs']
    io_groups = infile['msg_headers']['io_groups']

    pkts = []
    for msg, io_group in zip(msgs, io_groups):
        pkts.extend(parse(msg, io_group=io_group))
    to_file(out_file_indirect, packet_list=pkts)

    to_file_direct(out_file_direct, msgs, io_groups)

    pkts_indirect = h5py.File(out_file_indirect)['packets']
    pkts_direct = h5py.File(out_file_direct)['packets']

    assert len(pkts_direct) > 0
    assert all(pkts_direct[:] == pkts_indirect[:])
